{"version":3,"sources":["components/header/Header.js","components/input/Input.js","components/card/Card.js","components/cardlist/CardList.js","components/scroll/Scroll.js","components/errorboundary/ErrorBoundary.js","containers/app/App.js","actions/actions.js","contents/Constants.js","serviceWorker.js","reducers/reducers.js","index.js"],"names":["Header","className","style","color","fontSize","Input","onTextChange","onButtonClick","id","type","onChange","placeholder","onClick","Card","props","alt","src","name","email","CardList","robolCardList","Robots","map","robot","i","key","Scroll","border","margin","height","overflowY","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","robots","fetch","then","response","json","data","inputText","filterRobots","filter","toLowerCase","includes","length","found","newRobotList","concat","textAlign","fontWeight","connect","searchFieldText","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.87d6dbb3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet Header = () =>{\r\n\treturn(\r\n\t\t<header className=\"tc\">\r\n\t\t\t<h1 style={{color:'#363062', fontSize:'4rem'}}>Robo Friend</h1>\r\n\t\t</header>\r\n\t\t);\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport './Input.css'\r\n\r\nlet Input = ({onTextChange, onButtonClick}) =>{\r\n\treturn(\r\n\t\t  <div className=\"al\">\r\n   \t\t\t <input id=\"name\" className=\"input-reset ba b--black-20 pa2 mb2 dib\" type=\"text\" onChange={onTextChange} placeholder=\"Find Robots\"/>\r\n\t\t\t  <div className=\"ph3\">\r\n\t\t\t\t  <button className=\"ph3 ba1 pv2 bg-purple\" onClick={onButtonClick}>Button Text</button>\r\n\t\t\t\t</div>\r\n  \t\t  </div>\r\n\t);\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './Card.css';\r\nlet Card = ({props}) =>{\r\n\treturn (\r\n\t\t<div className=\"card mar center tc bg-light-blue br3 pa3 mr4 pa4-ns ba b--black-10 shadow-5 grow pointer\">\r\n\t\t\t<img alt=\"Robot\" src={`https://robohash.org/${props.id}`} className=\"center br-100 h4 bg-white w4 dib ba b--black-05 pa2\"/>\r\n\t\t\t<h1 className=\"tc h1\">{props.name}</h1>\r\n\t\t\t<br/>\r\n\t\t\t<h3 className = \"\">{props.email}</h3>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/Card';\r\nimport './cardList.css'\r\n\r\nconst CardList = ({Robots}) => {\r\n\t//throw new Error(\"This is the error for testing...\");\r\n\t// let robolCardList = [];\r\n\t// Robots.forEach((robot) => robolCardList.push(<Card props={robot}/>));\r\n\tlet robolCardList = Robots.map((robot, i) => <Card key={i} props={robot}/>);\r\n\treturn(\r\n\t\t<div className=\"CardList m4\">\r\n\t\t\t{robolCardList}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div className='shadow-5' style={{border:'5px solid #f0a500',margin:'5px', height:'445px', overflowY:'scroll'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo){\r\n\t\tthis.setState({hasError:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.hasError ? <h1> Something wrong happened. </h1> : this.props.children;\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport Header from '../../components/header/Header';\r\nimport Input from '../../components/input/Input';\r\nimport CardList from '../../components/cardlist/CardList';\r\nimport Scroll from '../../components/scroll/Scroll';\r\nimport ErrorBoundary from '../../components/errorboundary/ErrorBoundary';\r\n//import {Robots} from '../../contents/Contents';\r\nimport {connect} from 'react-redux';\r\nimport {setSearchField} from '../../actions/actions';\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    inputText: state.searchFieldText\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onTextChange: (event) => dispatch(setSearchField(event.target.value))\r\n});\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      robots: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n      //setTimeout(() => {this.setState({robots:Robots});}, 3000);\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({robots:data}))\r\n    }\r\n\r\n    render(){\r\n      let {robots} = this.state;\r\n      let {inputText, onTextChange} = this.props;\r\n      // const onTextChange = (event) => {\r\n      //   if(event.keyCode === 13){\r\n      //       // onButtonClick();\r\n      //   }\r\n      //   this.setState({inputText: event.target.value});\r\n      // }\r\n\r\n      const onButtonClick = () => {\r\n        if(inputText.length>0){\r\n        let found = false;\r\n        for(let robot of robots){\r\n            found = robot.name.toLowerCase()===(inputText.toLowerCase());\r\n        };\r\n        if(!found){ \r\n            const newRobotList = robots.concat(\r\n              [{\"id\": robots.length+1,\r\n                \"name\": inputText,\r\n                \"email\": \"Noemail@nodomain.com\"}]);\r\n            this.setState({robots: newRobotList});\r\n          }\r\n        }\r\n      }\r\n\r\n      let filterRobots = robots.filter((robot, i) =>{\r\n        return robot.name.toLowerCase().includes(inputText.toLowerCase());\r\n      });\r\n\r\n      return (!robots.length) ?\r\n        <h1 style={{textAlign:'center', fontWeight:'600%'}}>Loading...</h1> :\r\n        (<div className=\"body\">\r\n           <Header/>\r\n           <Input  onTextChange={onTextChange} onButtonClick={onButtonClick}/>\r\n           <Scroll>\r\n             <div className=\"App\">\r\n               <ErrorBoundary>\r\n                 <CardList Robots={filterRobots}/>\r\n                </ErrorBoundary>\r\n              </div>\r\n            </Scroll>\r\n          </div>);\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {SET_SEARCH_FIELD} from '../contents/Constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: SET_SEARCH_FIELD,\r\n\tpayload: text\r\n});","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SET_SEARCH_FIELD} from '../contents/Constants';\r\n\r\nconst initialState = {\r\n\tsearchFieldText: ''\r\n};\r\n\r\nexport const setRobots = (state=initialState, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase SET_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({},state,{searchFieldText: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport {setRobots} from './reducers/reducers';\n\n\nlet store = createStore(setRobots);\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store}>\n   \t <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}