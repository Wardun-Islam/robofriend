{"version":3,"sources":["components/header/Header.js","components/input/Input.js","components/card/Card.js","components/cardlist/CardList.js","components/scroll/Scroll.js","components/errorboundary/ErrorBoundary.js","containers/app/App.js","actions/actions.js","contents/Constants.js","serviceWorker.js","reducers/reducers.js","index.js"],"names":["Header","className","style","color","fontSize","Input","onTextChange","onButtonClick","id","type","onChange","placeholder","onClick","Card","props","alt","src","name","email","CardList","robolCardList","Robots","map","robot","i","key","Scroll","border","margin","height","overflowY","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","requestRobots","inputText","robots","requestPending","createRobot","filterRobots","filter","toLowerCase","includes","textAlign","fontWeight","connect","setRobots","searchFieldText","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","text","Boolean","window","location","hostname","match","setRobotsInitialState","requestRobotsInitialState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","length","found","newRobotList","concat","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.dab6b8bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet Header = () =>{\r\n\treturn(\r\n\t\t<header className=\"tc\">\r\n\t\t\t<h1 style={{color:'#363062', fontSize:'4rem'}}>Robo Friend</h1>\r\n\t\t</header>\r\n\t\t);\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport './Input.css'\r\n\r\nlet Input = ({onTextChange, onButtonClick}) =>{\r\n\treturn(\r\n\t\t  <div className=\"al\">\r\n   \t\t\t <input id=\"name\" className=\"input-reset ba b--black-20 pa2 mb2 dib\" type=\"text\" onChange={onTextChange} placeholder=\"Find Robots\"/>\r\n\t\t\t  <div className=\"ph3\">\r\n\t\t\t\t  <button className=\"button\" onClick={onButtonClick}>New Robot</button>\r\n\t\t\t\t</div>\r\n  \t\t  </div>\r\n\t);\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './Card.css';\r\nlet Card = ({props}) =>{\r\n\treturn (\r\n\t\t<div className=\"card mar center tc bg-light-blue br3 pa3 mr4 pa4-ns ba b--black-10 shadow-5 grow pointer\">\r\n\t\t\t<img alt=\"Robot\" src={`https://robohash.org/${props.name}`} className=\"center br-100 h4 bg-white w4 dib ba b--black-05 pa2\"/>\r\n\t\t\t<h1 className=\"tc h1\">{props.name}</h1>\r\n\t\t\t<br/>\r\n\t\t\t<h3 className = \"\">{props.email}</h3>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/Card';\r\nimport './cardList.css'\r\n\r\nconst CardList = ({Robots}) => {\r\n\t//throw new Error(\"This is the error for testing...\");\r\n\t// let robolCardList = [];\r\n\t// Robots.forEach((robot) => robolCardList.push(<Card props={robot}/>));\r\n\tlet robolCardList = Robots.map((robot, i) => <Card key={i} props={robot}/>);\r\n\treturn(\r\n\t\t<div className=\"CardList m4\">\r\n\t\t\t{robolCardList}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div className='shadow-5' style={{border:'5px solid #f0a500',margin:'5px', height:'445px', overflowY:'scroll'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo){\r\n\t\tthis.setState({hasError:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.hasError ? <h1> Something wrong happened. </h1> : this.props.children;\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport Header from '../../components/header/Header';\r\nimport Input from '../../components/input/Input';\r\nimport CardList from '../../components/cardlist/CardList';\r\nimport Scroll from '../../components/scroll/Scroll';\r\nimport ErrorBoundary from '../../components/errorboundary/ErrorBoundary';\r\n//import {Robots} from '../../contents/Contents';\r\nimport {connect} from 'react-redux';\r\nimport {setSearchField, requestRobots, createRobot} from '../../actions/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    inputText: state.setRobots.searchFieldText,\r\n    requestPending: state.requestRobots.requestPending,\r\n    robots: state.requestRobots.robots,\r\n    hasError: state.requestRobots.hasError,\r\n    error: state.requestRobots.error\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onTextChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    requestRobots: () => dispatch(requestRobots()),\r\n    createRobot: (text) => dispatch(createRobot(text))\r\n});\r\n\r\nclass App extends Component{\r\n  \r\n  componentDidMount(){\r\n      //setTimeout(() => {this.setState({robots:Robots});}, 3000);\r\n      //console.log(this.props);\r\n      this.props.requestRobots();\r\n    }\r\n\r\n    render(){\r\n      let {inputText, onTextChange, robots, requestPending, createRobot} = this.props;\r\n      // const onTextChange = (event) => {\r\n      //   if(event.keyCode === 13){\r\n      //       // onButtonClick();\r\n      //   }\r\n      //   this.setState({inputText: event.target.value});\r\n      // }\r\n\r\n      const onButtonClick = () => {\r\n        createRobot(inputText);\r\n      }\r\n      //{\r\n      //   if(inputText.length>0){\r\n      //   let found = false;\r\n      //   for(let robot of robots){\r\n      //       found = robot.name.toLowerCase()===(inputText.toLowerCase());\r\n      //   };\r\n      //   if(!found){ \r\n      //       const newRobotList = robots.concat(\r\n      //         [{\"id\": robots.length+1,\r\n      //           \"name\": inputText,\r\n      //           \"email\": \"Noemail@nodomain.com\"}]);\r\n      //       this.setState({robots: newRobotList});\r\n      //     }\r\n      //   }\r\n      // }\r\n\r\n      let filterRobots = robots.filter((robot, i) =>{\r\n        return robot.name.toLowerCase().includes(inputText.toLowerCase());\r\n      });\r\n\r\n      return (requestPending) ?\r\n        <h1 style={{textAlign:'center', fontWeight:'600%'}}>Loading...</h1> :\r\n        (<div className=\"body\">\r\n           <Header/>\r\n           <Input  onTextChange={onTextChange} onButtonClick={onButtonClick}/>\r\n           <Scroll>\r\n             <div className=\"App\">\r\n               <ErrorBoundary>\r\n                 <CardList Robots={filterRobots}/>\r\n                </ErrorBoundary>\r\n              </div>\r\n            </Scroll>\r\n          </div>);\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CREATE_ROBOT, SET_SEARCH_FIELD, SET_REQUEST_PENDING, SET_REQUEST_SUCCESS, SET_REQUEST_FAILED} from '../contents/Constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: SET_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\nexport const createRobot = (data) => ({\r\n\ttype: CREATE_ROBOT,\r\n\tpayload: data\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: SET_REQUEST_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then((data) => dispatch({type: SET_REQUEST_SUCCESS, payload: data}))\r\n\t\t.catch((error) => dispatch({type: SET_REQUEST_FAILED, payload: error}))\r\n};","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';\r\nexport const SET_REQUEST_PENDING = 'SET_REQUEST_PENDING';\r\nexport const SET_REQUEST_SUCCESS = 'SET_REQUEST_SUCCESS';\r\nexport const SET_REQUEST_FAILED = 'SET_REQUEST_FAILED';\r\nexport const CREATE_ROBOT = 'CREATE_ROBOT';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CREATE_ROBOT, SET_SEARCH_FIELD, SET_REQUEST_PENDING, SET_REQUEST_SUCCESS, SET_REQUEST_FAILED} from '../contents/Constants';\r\n\r\nconst setRobotsInitialState = {\r\n\tsearchFieldText: ''\r\n};\r\n\r\nexport const setRobots = (state=setRobotsInitialState, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase SET_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({},state,{searchFieldText: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst requestRobotsInitialState = {\r\n\trequestPending: false,\r\n\trobots:[],\r\n\thasError: false,\r\n\terror: ''\r\n};\r\n\r\nexport const requestRobots = (state=requestRobotsInitialState, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase SET_REQUEST_PENDING:\r\n\t\t\treturn Object.assign({},state,{requestPending: true});\r\n\t\tcase SET_REQUEST_SUCCESS:\r\n\t\t\treturn Object.assign({},state,{robots: action.payload, requestPending: false});\r\n\t\tcase SET_REQUEST_FAILED:\r\n\t\t\treturn Object.assign({},state,{hasError: true, error: action.payload, requestPending: false});\r\n\t\tcase CREATE_ROBOT:\r\n\t\t\tif(action.payload.length){\r\n\t         let found = false;\r\n\t         for(let robot of state.robots){\r\n\t             found = robot.name.toLowerCase()===(action.payload.toLowerCase());\r\n\t         };\r\n\t         if(!found){ \r\n\t             const newRobotList = state.robots.concat([\r\n\t             \t{\"id\": state.robots.length+1,\r\n\t                 \"name\": action.payload,\r\n\t                 \"email\": action.payload+\"@nodomain.com\"}]);\r\n\t             return Object.assign({},state,{robots: newRobotList});\r\n\t           }\r\n\t       }\r\n\t\t\treturn state;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {setRobots, requestRobots} from './reducers/reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({setRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n\t  \t<Provider store={store}>\n\t   \t \t<App />\n\t    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}